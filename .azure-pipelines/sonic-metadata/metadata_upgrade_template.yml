parameters:
- name: TESTBED_NAME
  type: string
  default: vms7-t0-s6100-4
  displayName: "Testbed Name"
- name: UPGRADE_TYPE
  type: string
  displayName: "Type of upgrade"
- name: METADATA_UPGRADE_PATH
  default: true
  type: boolean
- name: SKIP_SAD_CASES
  default: true
  type: boolean
- name: TEST_TCAM_HOLE
  default: false
  type: boolean
- name: FROM_IMAGE_LIST
  type: string
  displayName: "All base image numbers (space separated)"
- name: FROM_IMAGE_URL
  displayName: "Base image location"
  type: string
- name: TO_IMAGE_LIST
  type: string
  displayName: "All target image numbers (space separated)"
- name: TO_IMAGE_URL
  displayName: "Target image location"
  type: string

stages:
- stage: SONiCMetadataUpgradeTest
  dependsOn: []
  jobs:
  - job:
    pool: nightly
    displayName: "Test SONiC Metadata Files"
    timeoutInMinutes: 1800    # minutes, totally 30 hours
    variables:
      - group: TBSHARE_SECRETS
      - group: KUSTO_SECRETS
      - group: SECRETS_JSON
    steps:
    - checkout: self
    - checkout: https://mssonic@dev.azure.com/mssonic/internal/_git/sonic-metadata

    - template: ../nightly/templates/get_secrets.yml
      parameters:
        BASE_DIR: sonic-mgmt-int

    - task: PythonScript@0
      displayName: Parse Testbed Info
      inputs:
        scriptSource: 'inline'
        script: |
          from __future__ import print_function
          import os, imp, sys

          testbed_module = imp.load_source('testbed', 'sonic-mgmt-int/tests/common/testbed.py')
          testbed_name = '${{ parameters.TESTBED_NAME }}'
          testbed_file = 'testbed.yaml'
          tbinfo = testbed_module.TestbedInfo('sonic-mgmt-int/ansible/{}'.format(testbed_file))
          target_testbed = tbinfo.testbed_topo.get(testbed_name, None)
          if not target_testbed:
              print('Testbed {} not found!'.format(testbed_name))
              sys.exit(1)
          dut_list = target_testbed.get('duts', [])
          dut_list_str = ' '.join(x for x in dut_list)

          print('Basic info of testbed {}:'.format(testbed_name))
          print('    INVENTORY_NAME={}'.format(target_testbed['inv_name']))
          print('     TOPOLOGY_NAME={}'.format(target_testbed['topo']['name']))
          print('     TOPOLOGY_TYPE={}'.format(target_testbed['topo']['type']))
          print('          DUT_LIST={}'.format(dut_list_str))

          # Below code can create dynamic azure pipeline variables
          # Reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-a-job-scoped-variable-from-a-script
          print('##vso[task.setvariable variable=INVENTORY_NAME;]{}'.format(target_testbed['inv_name']))
          print('##vso[task.setvariable variable=TOPOLOGY_NAME;]{}'.format(target_testbed['topo']['name']))
          print('##vso[task.setvariable variable=TOPOLOGY_TYPE;]{}'.format(target_testbed['topo']['type']))
          print('##vso[task.setvariable variable=DUT_LIST;]{}'.format(dut_list_str))

    - script: |
        python ./sonic-mgmt-int/.azure-pipelines/nightly/templates/lock_release.py -t ${{ parameters.TESTBED_NAME }} -a lock -r UpgradePathAZP
      env:
          TBSHARE_AAD_CLIENT_ID: $(TBSHARE_AAD_CLIENT_ID)
          TBSHARE_AAD_CLIENT_SECRET: $(TBSHARE_AAD_CLIENT_SECRET)
      displayName: Lock Testbed

    - template: upgrade_sonic_metadata.yml
      parameters:
        TESTBED_NAME: ${{ parameters.TESTBED_NAME }}
        UPGRADE_TYPE: ${{ parameters.UPGRADE_TYPE }}
        FROM_IMAGE_LIST: ${{ parameters.FROM_IMAGE_LIST }}
        FROM_IMAGE_URL: ${{ parameters.FROM_IMAGE_URL }}
        TO_IMAGE_LIST: ${{ parameters.TO_IMAGE_LIST }}
        TO_IMAGE_URL: ${{ parameters.TO_IMAGE_URL }}
        METADATA_UPGRADE_PATH: ${{ parameters.METADATA_UPGRADE_PATH }}
        SKIP_SAD_CASES: ${{ parameters.SKIP_SAD_CASES }}
        TEST_TCAM_HOLE: ${{ parameters.TEST_TCAM_HOLE }}

    - publish: ./sonic-mgmt-int/tests/logs
      displayName: "Archive test logs"
      artifact: ${{ parameters.TESTBED_NAME}}.nightly.log@$(System.JobAttempt)
      condition: always()

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFiles: '**/tests/logs/**/*.xml'
        testRunTitle: ${{ parameters.TESTBED_NAME}}.upgrade_path
      condition: always()

    - script: |
        python ./sonic-mgmt-int/.azure-pipelines/nightly/templates/lock_release.py -t ${{ parameters.TESTBED_NAME }} -a release
      env:
          TBSHARE_AAD_CLIENT_ID: $(TBSHARE_AAD_CLIENT_ID)
          TBSHARE_AAD_CLIENT_SECRET: $(TBSHARE_AAD_CLIENT_SECRET)
      displayName: Release Testbed
      condition: always()
