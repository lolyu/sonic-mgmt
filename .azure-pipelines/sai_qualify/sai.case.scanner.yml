name: $(Build.DefinitionName)_Running_Init_$(Build.BuildId)_$(Date:yyyyMMdd)

trigger: none
pr: none

variables:
  - template: ./templates/template_variables.yml

parameters:
  - name: TESTBED_NAME
    type: string
    displayName: "Testbed Name"
    default: vms11-t0-s6000

  - name: PY_SAITHRIFT_URL
    type: string
    default: $(SAITHRIFTV2_BRCM_INTERNAL_202012)
    displayName: "py_saithrift URL"

  - name: SAI_REPO
    type: string
    displayName: "SAI Dev Repo"
    default: "opencomputeproject"

  - name: SAI_BRANCH
    type: string
    displayName: "SAI Dev Branch"
    default: "master"

  - name: JOB_CONFIG
    type: string
    displayName: "JOB CONFIG"
    default: " "

  #Resource agent pool
  - name: AGENT_POOL
    displayName: "Resource agent pool"
    type: string
    default: nightly
    values:
      - nightly
      - nightly2
      - nightly-svc
      - nightly-bjw

  - name: SCAN_CASES
    displayName: "Scan and Upload"
    type: boolean
    default: true

jobs:
  - job: SAITest
    pool: ${{ parameters.AGENT_POOL }}
    variables:
      - group: TBSHARE_SECRETS
      - group: KUSTO_SAI_SECRETS
      - name: skipComponentGovernanceDetection
        value: true

    steps:
      - template: ../../nightly/templates/get_secrets.yml

      - task: Bash@3
        displayName: Get Bash Env Param
        inputs:
          targetType: 'inline'
          script: |
              echo "##vso[task.setvariable variable=BASH_WORKING_FOLDER;]`pwd`"

      - task: Bash@3
        condition: ${{ parameters.SCAN_CASES }}
        displayName: Scan and Upload
        inputs:
          targetType: 'inline'
          script: |
            set -x
            BASE_PATH=$(pwd)

            echo "Activate python3 virtual environment"
            source /var/AzDevOps/env-python3/bin/activate
            cd ${BASH_WORKING_FOLDER}/test_reporting
            pip3 install -r requirements.txt

            echo "Generate header"
            cd ${BASH_WORKING_FOLDER}
            rm -rf SAI
            git clone https://github.com/opencomputeproject/SAI.git
            SAI_PATH=${BASH_WORKING_FOLDER}/SAI
            python3 test_reporting/sai_coverage/sai_header_scanner.py $SAI_PATH/inc
            
            echo "Generate SAI definitions"
            RESOURCE_PATH=$BASE_PATH/resources
            PY_SAITHRIFT=$(echo $PY_SAITHRIFT_URL | awk -F "/" '{print $NF}')
            mkdir -p $RESOURCE_PATH
            wget -P $RESOURCE_PATH $PY_SAITHRIFT_URL
            dpkg -i $RESOURCE_PATH/$PY_SAITHRIFT
            SAI_ADAPTER_PATH=$(find / -name "sai_adapter.py")
            echo $SAI_ADAPTER_PATH
            rm -rf test_reporting/sai_coverage/sai_adapter
            mkdir test_reporting/sai_coverage/sai_adapter
            cp $SAI_ADAPTER_PATH test_reporting/sai_coverage/sai_adapter/
            python3 test_reporting/sai_coverage/sai_adapter_scanner.py test_reporting/sai_coverage/sai_adapter

            echo "Generate scanning results"
            python3 test_reporting/sai_coverage/case_scanner.py -p $SAI_PATH/test/sai_test -sp result/scan/sai_test
            # python3 test_reporting/sai_coverage/case_scanner.py -p $SAI_PATH/ptf -sp result/scan/ptf

            echo "Upload scanning results"
            python3 ${BASH_WORKING_FOLDER}/test_reporting/report_uploader.py ${BASH_WORKING_FOLDER}/result/scan/sai_test SaiTestData -c case_invoc
            # python3 ${BASH_WORKING_FOLDER}/test_reporting/report_uploader.py ${BASH_WORKING_FOLDER}/result/scan/ptf SaiTestData -c case_invoc

        env:
            TEST_REPORT_INGEST_KUSTO_CLUSTER: $(TEST_REPORT_INGEST_KUSTO_CLUSTER)
            TEST_REPORT_AAD_TENANT_ID: $(TEST_REPORT_AAD_TENANT_ID)
            TEST_REPORT_AAD_CLIENT_ID: $(TEST_REPORT_AAD_CLIENT_ID)
            TEST_REPORT_AAD_CLIENT_KEY: $(TEST_REPORT_AAD_CLIENT_KEY)
            BASH_WORKING_FOLDER: $(BASH_WORKING_FOLDER)
            PYTEST_PATH: ${{ parameters.PYTEST_PATH }}
            SAI_TESTREPORT_PATH: ${{ parameters.SAI_TESTREPORT_PATH }}
            PY_SAITHRIFT_URL: ${{ parameters.PY_SAITHRIFT_URL }}
