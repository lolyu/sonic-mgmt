# This Playbook run time generate matching configuration file for SONiC switch(Minigraph) based on a specific testbed topology specified in testbed.yaml
# When user call testbed-cli to deploy a testbed topology, use this playbook to generate matching SONiC minigraph file and deploy it into SONiC switch under test.
# Or when you know your topology name, you may use this playbook alone to generate a minigraph matching your topology name without deploy it.
#
# VM Topologies are defined inside of vars/ directory in files vars/topo_{{ topology_name}}.yml
#  Every topology should have a name to distinct one topology from another on the server
#  Every topology contains a ptf container which will be used as placeholder for the injected interfaces from VMs, or direct connections to PTF host
# VMs inventory file is also required to have all VMs ready for generating the minigraph file
# VMs inventory is in file 'veos'
#
# Template files for generating minigraph.xml are defined in template/topo directory
#
# To generate and deploy minigraph for SONiC switch matching the VM topology please use following command
# ansible-playbook -i lab config_sonic_basedon_testbed.yml -l sonic_dut_name -e vm_base=VM0300 -e topo=t0 [-e deploy=true -e save=true]
# ansible-playbook -i lab config_sonic_basedon_testbed.yml -l sonic_dut_name -e testbed_name=vms1-1 [-e deploy=true -e save=true]

# Parameters
# -l str-msn2700-01          - the sonic_dut_name you are going to generate minigraph for
# -e vm_base=VM0300          - the VM name which is used to as base to calculate VM name for this set
# -e topo=t0                 - the name of topology to generate minigraph file
# -e testbed_name=vms1-1     - the testbed name specified in testbed.yaml file
#                              (if you give 'testbed_name' option, will use info from testbed and ignore topo and vm_base options)
# -e vm_file=veos            - the virtual machine file name
# -e deploy=True             - if deploy the newly generated minigraph to the target DUT, default is false if not defined
# -e save=True               - if save the newly generated minigraph to the target DUT as startup-config, default is false if not defined
#
# After minigraph.xml is generated, the playbook will replace the original minigraph file under ansible/minigraph/ with the newly generated minigraph file for the SONiC device.
# The playbook will based on deploy=True or False to decide if load the SONiC device with new minigraph or not.
# If deploy=true, the playbook will apply the newly generated minigraph to the SONiC switch
# If save=true, the playbook will save the newly generated minigraph to SONiC switch as startup-config
#
####################################################################################################################################################################################

- hosts: sonic
  gather_facts: no
  tasks:

  - block:
    - name: set default testbed file
      set_fact:
        testbed_file: testbed.yaml
      when: testbed_file is not defined

    - name: Gathering testbed information
      test_facts: testbed_name="{{ testbed_name }}" testbed_file="{{ testbed_file }}"
      delegate_to: localhost

    - fail: msg="The DUT you are trying to run test does not belongs to this testbed"
      when: inventory_hostname not in testbed_facts['duts']
    
    - block:
      - name: config virtual arista duts
        debug:
          msg: "Config virtual arist device"
      - include_tasks: ./vendor_config/config_arista_vm.yml
      when: hostvars[inventory_hostname]['type'] == 'kvm' and hostvars[inventory_hostname]['image'] == 'arista'

    - block:
      - name: config virtual Juniper duts
        debug:
          msg: "Config virtual Juniper device"
      - include_tasks: ./vendor_config/config_juniper_vm.yml
      when: hostvars[inventory_hostname]['type'] == 'kvm'  and hostvars[inventory_hostname]['image'] == 'juniper'

    - block:
      - name: config virtual Cisco duts
        debug:
          msg: "Config virtual Cisco device"
      - include_tasks: ./vendor_config/config_cisco_vm.yml
      when: hostvars[inventory_hostname]['type'] == 'kvm'  and hostvars[inventory_hostname]['image'] == 'cisco'


    - block:
      - name: config virtual sonic duts
        debug:
          msg: "Config virtual sonic device"
      - include_tasks: ./vendor_config/config_wan_sonic_vm.yml
      when: hostvars[inventory_hostname]['type'] == 'kvm' and hostvars[inventory_hostname]['image'] == 'sonic'

    - block:
      - name: config physical duts
        debug:
          msg: "Config physical SONiC device"
      - include_tasks: ./vendor_config/config_phy_sonic_dut.yml
      when: hostvars[inventory_hostname]['type'] == 'hardware'  
